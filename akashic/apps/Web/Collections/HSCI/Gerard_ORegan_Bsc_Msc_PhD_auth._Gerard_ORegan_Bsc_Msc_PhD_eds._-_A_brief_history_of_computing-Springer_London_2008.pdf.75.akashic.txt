fundamentalism that I have seen exhibited elsewhere, and am of the view that if other notations add value in formal speciﬁcation then it is perfectly reasonable to employ them. 4.5 Formal Methods 121 electronic system elements of defense equipment” [MOD:91b]. The objective of this standard is to provide guidance to identify which systems or parts of systems being developed are safety-critical and thereby require the use of formal methods. This proposed system is subject to an initial hazard analysis to determine whether there are safety-critical parts. The reaction to these defence standards 00-55 and 00-5621 was quite hostile initially, as most suppliers were unlikely to meet the technical and organization requirements of the standard. This is described in [Tie:91] and Brown in [Bro:90] argues that Comment 4.1 (Missile Safety) Missile systems must be presumed dangerous until shown to be safe, and that the absence of evidence for the existence of dangerous errors does not amount to evidence for the absence of danger. It is quite possible that a software company may be sued for software which injures a third party, and it is conjectured in [Mac:93] that the day is not far off when A system failure traced to a software fault, and injurious to a third party, will lead to a successful litigation against the developers of the said system software. This suggests that companies will need a quality assurance program that will demonstrate that every reasonable practice was considered to prevent the occurrence of defects. One such practice for defect prevention is the use of formal methods in the software development lifecycle, and in some domains, e.g., the safety critical domain, it looks likely that the exclusion of formal methods in the software devel- opment cycle may need to be justiﬁed. There is evidence to suggest that the use of formal methods provides savings in the cost of the project, for example, an independent audit of the large CICS trans- action processing project at IBM demonstrated a 9% cost saving attributed to the use of formal methods. An independent audit of the Inmos ﬂoating point unit of the T800 project conﬁrmed that the use of formal methods led to an estimated 12-month reduction in testing time. These savings are discussed in more detail in chapter one of [HB:95]. The approach of modern software companies to providing high-quality software on time and within budget is to employ a mature software development process including inspections and testing. Models such as the CMM [Pau:93], its succes- sor, the CMMI [CKS:03], and ISO 9000 are employed to assist the organization to mature its software process. The process-based approach is also useful in that it demonstrates that reasonable practices are employed to identify and prevent the occurrence of defects, and an ISO 9000 or CMMI certiﬁed software development organization has been independently assessed to have reasonable software devel- opment practices in place. A formal methods approach is complementary to these models, and it ﬁts comfortably into the defect prevention key process area and the technology change management key process area on the Capability Maturity Model. 21 The United Kingdom Defence Standards 0055 and 0056 have been revised in recent years to be less prescriptive on the use of formal methods. 122 4 Software Engineering 4.5.2 Applications of Formal Methods Formal methods are used in academia and to varying degrees in industry. The safety- critical and security critical ﬁelds are two key areas to which formal methods have been successfully applied. Several organizations have piloted formal methods with varying degrees of success. These include IBM, who developed VDM at its labora- tory in Vienna. Another IBM site, IBM (Hursley) piloted the Z formal speciﬁcation language in the United Kingdom for the CICS (Customer Information Control Sys- tem) project. This is an online transaction processing system with over 500,000 lines of code. The project generated valuable feedback to the formal methods community, and although it was very successful in the sense that an independent audit veriﬁed that the use of formal methods generated a 9% cost saving, there was resistance to the deployment of the formal methods in the organization.22 This was attributed to the lack of education on formal methods in computer science curricula, lack of adequate support tools for formal methods, and the difﬁculty that the programmers had with mathematics and logic. The mathematical techniques developed by Parnas (i.e., requirements model and tabular expressions) have been employed to specify the requirements of the A-7 aircraft as part of a software cost reduction program for the United States Navy.23 Tabular expressions have also been employed for the software inspection of the automated shutdown software of the Darlington Nuclear power plant in Canada.24 These are two successful uses of mathematical techniques in software engineering.