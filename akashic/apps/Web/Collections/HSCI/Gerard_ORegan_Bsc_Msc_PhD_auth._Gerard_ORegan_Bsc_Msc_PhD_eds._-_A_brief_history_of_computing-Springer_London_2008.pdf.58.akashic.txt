classes, and this led to C++ which was released in 1983. C++ was designed to use the power of object-oriented programming,and to maintain the speed and portability of C. It is essentially a superset of C, and it provides a signiﬁcant extension of C’s capabilities. C++ does not force the programmer to use the object-oriented features of the language, and it is valid to use C++ as a procedural language. It is also used as a teaching language. 14 Information hiding is a key contribution by Parnas to computer science. He has also done work on mathematical approaches to software inspections using tabular expressions [ORg:06], but this work is mainly of academic interest. 15 The inventors of Simula-67 were Ole-Johan Dahl and Kristen Nygaard. 16 Dahl and Nygaard were working on ship simulations and were attempting to address the huge number of combinations of different attributes from different types of ships. Their insight was to group the different types of ships into different classes of objects, with each class of objects being responsible for deﬁning its own data and behaviour. 3.4 Object-Oriented Languages 89 Table 3.1 Object-oriented paradigm Feature Description Class A class deﬁnes the abstract characteristics of a thing, including its attributes (or properties), and its behaviours (or methods). For example, the class of Cats deﬁnes all possible cats by listing the characteristics that feline creatures possess (e.g., breed, fur, colour and the ability to meow). The members of a class are termed objects. Object An object is a particular instance of a class with its own set of attributes. For example, the object “Mimi” is an instance of the class Cat: i.e., it is one particular cat with its own particular set of characteristics. Mimi may contain black fur and has her own distinct meow. The set of values of the attributes of a particular object is called its state. Method The methods associated with a class represent the behaviours of the objects in the class. These are things that an object does and represent how an object is used. The method is the action that is carried out, i.e., the code that gets executed when the message is sent to a particular object. For example, one behaviour of the object “Mimi” in the class cats is the ability to meow and this is one of Mimi’s methods. Message Passing Message passing is the process by which an object sends data to another object, or asks the other object to invoke a method. Inheritence A class may have sub-classes (or children classes) that are more specialised versions of the class. A subclass inherits the attributes and methods of the parent class. Inheritance allows the programmer to create new classes from existing classes. The derived classes inherit the methods and data structures of the parent class. New methods may be added, or existing methods overridden to make the child class more speciﬁc. For example, the class Cat has several sub-classes such as the Egyptian Mau, the Manx, the Somali, and the Turkish Angora. Mimi is a member of the Egyptian Mau sub-class. The sub-classes of a class inherit attributes and behaviors from their parent classes, and may also introduce their own attributes. Inheritance is an “is–a” relationship: Mimi is an Egyptian Mau and an Egyptian Mau is a Cat, therefore Mimi inherits from both Egyptian Maus and Cats. Inheritence may be single or multiple, although multiple inheritence is not always supported. Encapsulation (Information Hiding) One of the fundamental principles of the object-oriented world is encapsulation. This principle is that the internals of an object are kept private to the object, and may not be accessed from outside the object. That is, encapsulation hides the details of how a particular class works. Knowledge of the engine of a car is not required in order to be able to drive the car. Similarly, programmers do not need to know all details of an object to be able to use it. Encapsulation requires a clearly speciﬁed interface around the services provided. Abstraction Abstraction simpliﬁes complexity by modeling classes and removing all un-necessary detail. All essential detail is represented, and non-essential information is ignored. Polymorphism Polymorphism is behavior that varies depending on the class in which the behavior is invoked. Two or more classes may react differently to the same message. 90 3 Computer Programming Languages Table 3.1 (continued) Feature Description Polymorphism The same name is given to methods in different subclasses. The individual methods may implement similar tasks but are differentiated by the type of arguments passed to them. The concept of polymorphism is often expressed by the phrase “one interface, multiple methods”. For example, the Class of Animals has subclasses Cow and Cat. If Cow is