Retrieval functions enable a return from a more concrete speciﬁcation to the more abstract speciﬁcation. The initial speciﬁcation consists of an initial state, a system state, and a set of operations. The system state is a particular domain, where a domain is built out of primitive domains such as the set of natural numbers, etc., or constructed from primitive domains using domain constructors such as Cartesian product, disjoint union, etc. A domain-invariant predicate may further constrain the domain, and a type in VDM reﬂects a domain obtained in this way. Thus, a type in VDM is more speciﬁc than the signature of the type, and thus represents values in the domain deﬁned by the signature, which satisfy the domain invariant. In view of this approach to types, it is clear that VDM types may not be “statically type checked”. VDM speciﬁcations are structured into modules, with a module containing the module name, parameters, types, operations, etc. Partial functions occur frequently in computer science as many functions, especially recursively deﬁned functions can be undeﬁned, or fail to terminate for some arguments in their domain. VDM addresses partial functions by employing nonstandard logical operators, namely the logic of partial functions (LPFs) which can deal with undeﬁned operands. The Boolean expression T ∨⊥= ⊥∨T = T ; i.e., the truth value of a logical or operation is true if at least one of the logical operands is true, and the undeﬁned term is treated as a don’t care value. VDM has been used in industrial strength projects, as well as by the academic community. There is tool support available, for example, the IFAD Toolbox.29 VDM is described in more detail in [ORg:06]. There are several variants of VDM, 29 As discussed earlier the VDM Tools from the IFAD Toolbox are now owned by the CSK Group in Japan. 4.5 Formal Methods 129 including VDM++, the object-oriented extension of VDM, and the Irish school of the VDM, which is discussed in the next section. 4.5.7 VDM♣, the Irish School of VDM The Irish School of VDM is a variant of standard VDM, and is characterized by [Mac:90] its constructive approach, classical mathematical style, and its terse nota- tion. In particular, this method aims to combine the what and how of formal methods in that its terse speciﬁcation style stipulates in concise form what the system should do; furthermore,the fact that its speciﬁcations are constructive (or functional) means that the how is included with the what. However, it is important to qualify this by stating that the how as presented by VDM♣is not directly executable, as several of its mathematical data types have no corresponding structure in high-level program- ming languages or functional languages. Thus, a conversion or reiﬁcation of the speciﬁcation into a functional or higher-level language must take place to ensure a successful execution. It should be noted that the fact that a speciﬁcation is construc- tive is no guarantee that it is a good implementation strategy, if the construction itself is naive. This issue is considered (cf. pp. 135–7 in [Mac:99]) in the construction of the Fibonacci series. The Irish school follows a similar development methodology as in standard VDM, and is a model-oriented approach. The initial speciﬁcation is presented, with initial state and operations deﬁned. The operations are presented with precondi- tions; however, no postcondition is necessary as the operation is “functionally” (i.e., explicitly) constructed. Each operation has an associated proof obligation: i.e., if the precondition for the operation is true, and the operation is performed, then the system invariant remains true after the operation. The proof of invariant preserva- tion normally takes the form of constructive proofs. This is especially the case for existence proofs, in that the philosophy of the school is to go further than to provide a theoretical proof of existence; rather the aim is to exhibit existence constructively. The emphasis is on constructive existence, and the implication of this is that the school avoids the existential quantiﬁer of predicate calculus. In fact, reliance on logic in proof is kept to a minimum, and emphasis instead is placed on equa- tional reasoning. Special emphasis is placed on studying algebraic structures and their morphisms. Structures with nice algebraic properties are sought, and such a structure includes the monoid, which has closure, associativity, and a unit element. The monoid is a very common structure in computer science. The concept of iso-