When all clauses are examined and all variables in Vg are bound, the goal succeeds. But if a variable can not be bound for a given clause, that clause fails. Following the failure of a fails, Prolog backtracks. This involves going back to the left to a previous clauses to continue trying to unify with alternative bindings. Backtracking give Prolog the ability to ﬁnd multiple solutions to for a given query or goal. Most logic programming languages use a simple searching strategy to consider alternatives: r If a goal succeeds and there are more goals to achieve, then remember any untried alternatives and go on to the next goal. r If a goal is achieved and there are no more goals to achieve then stop with suc- cess. r If a goal fails and there are alternative ways to solve it then try the next one. r If a goal fails and there are no alternate ways to solve it, and there is a previous goal, then go back to the previous goal. r If a goal fails and there are no alternate ways to solve it, and no previous goal, then stop with failure. 98 3 Computer Programming Languages Constraint programming is a programming paradigm where relations between vari- ables can be stated in the form of constraints. Constraints specify the properties of the solution, and differs from the imperative programming languages in that they do not specify the sequence of steps to execute. 3.7 Syntax and Semantics There are two key parts to any programming language and these are its syntax and semantics. The syntax is the grammar of the language, and a program needs to be syntactically correct with respect to its grammar. The semantics of the language is deeper, and determines the meaning of what has been written by the programmer. The semantics of a language determines what a syntactically valid program will compute. A programming language is therefore given by: Programming Language = Syntax + Semantics The theory of the syntax of programming languages is well established, and Backus Naur Form29 (BNF) is employed to specify the grammar of languages. The gram- mar of a language may be input into a parsers, and the parser is then employed to determine if a program is syntactically correct. BNF was employed to deﬁne the grammar for the Algol-60 programming language, and is widely used today to specify the grammars of computer programming languages. Chomsky30 identiﬁed a number of different types of grammar (regular, context free, context sensitive). A BNF speciﬁcation consists of a set of rules such as: <symbol> ::= <expression with symbols> where <symbol> is a nonterminal, and the expression consists of sequences of symbols and/or sequences separated by the vertical bar “|” which indicates a choice. That is, it is one possible substitution for the symbol on the left. Symbols that never appear on a left side are called terminals. The deﬁnition of the syntax of various statements in a programming language is given below: <loop statement> ::= <while loop>|<for loop> <while loop> ::= while ( <condition> ) <statement> <for loop> ::= for ( <expression> ) <statement> <statement> ::= <assignment statement>|<loop statement> <assignment statement> ::= <variable> := <expression> 29 Backus Naur Form is named after John Backus and Peter Naur. It was created as part of the design of Algol 60, and used to deﬁne the syntax rules of the language. 30 Chomsky made important contributions to linguistics and the theory of grammars. He is more widely known today as a critic of United States foreign policy. 3.7 Syntax and Semantics 99 The example above is a partial deﬁnition of the syntax of various statements in the programming language. It includes various non-terminals (<loop statement>, <while loop>, <for loop>, <condition>, <expression>, <statement>, <assign- ment statement>, and <variable>). The terminals include “while”, “for”, “:=”, “(“ and ”)”. The production rules for <condition> and <expression> are not included. There are various types of grammars such as regular grammars, context free grammars, and context sensitive grammars. The grammar of a language (e.g. LL(1), LL(k), LR(1), LR(k) grammar expressed in BNF notation) is translated by a parser into a parse table. Each type of grammar has its own parsing algo- rithm to determine whether a particular program is valid with respect to its grammar. 3.7.1 Programming Language Semantics The formal semantics of a programming language is concerned with the mean- ing of programs. A programmer writes a program according to the rules of the programming language. The compiler ﬁrst checks the program for syntactic cor- rectness: i.e., it determines whether the program as written may be generated from