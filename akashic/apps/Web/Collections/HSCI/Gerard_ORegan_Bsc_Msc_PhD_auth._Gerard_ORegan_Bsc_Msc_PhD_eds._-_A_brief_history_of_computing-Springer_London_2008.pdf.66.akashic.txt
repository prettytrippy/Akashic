(DOD) to have a mechanism to assess the capability and maturity of software subcontractors. 4.1 Introduction 105 products actually do so. This in turn leads to products that the public can safely use. In other words, the engineer has a responsibility to ensure that the products are properly built, and are safe for the public to use. Parnas argues that traditional engineering be contrasted with the software engi- neering discipline where there is no licensing mechanism, and where individuals with no qualiﬁcations can participate in building software products.2 However, the fact that the maturity frameworks such as the CMMI or ISO 9000 place a strong emphasis on qualiﬁcations and training may help to deal with this. The Standish group conducted research in the late 1990s [Std:99] on the extent of current problems with schedule and budget overruns of IT projects. This study was conducted in the United States, but there is no reason to believe that European or Asian companies perform any better. The results indicate serious problems with on-time delivery.3 Fred Brooks argues that software is inherently complex, and that there is no silver bullet that will resolve all of the problems associated with soft- ware such as schedule overruns and software quality problems [Brk:75, Brk:86] (Fig. 4.2). The problem with poor software quality and poor software design is evident in the security ﬂaws exhibited in early versions of Microsoft Windows software. Such ﬂaws can cause minor irritation at best or at worse can seriously disrupt the work of an organization or individual. The Y2K problem, where dates were represented in a 2-digit format, required major rework for year 2000 compliance. Clearly, well- designed programs would have hidden the representation of the date, and this would have required minimal changes for year 2000 compliance. However, the quality of software produced by some companies is superiour.4 These companies employ mature software processes and are committed to continuous improvement. Mathematics plays a key role in engineering and may potentially assist soft- ware engineers in the delivery of high-quality software products that are safe to use. Several mathematical approaches that can assist in delivering high-quality soft- ware are described in [ORg:06]. There is a lot of industrial interest in software process maturity for software organizations, and approaches to assess and mature software companies are described in [ORg:02].5 These focus mainly on improving 2 Modern HR recruitment speciﬁes the requirements for a particular role, and interviews with candidates aim to establish that the candidate has the right education and experience for the role. 3 It should be noted that these are IT projects covering diverse sectors including banking, telecom- munications, etc., rather than pure software companies. My experience is that mature software companies following maturity frameworks such as level 2 or level 3 CMM maturity achieve project delivery generally within 20% of the project estimate. Mathematical approaches to software quality [ORg:06] are focused on technical ways to achieve software quality. There is also the need to focus on the management side of software engineering as this is essential for project success. The reader is referred to [ORg:02]. 4 I recall projects at Motorola that regularly achieved 5.6 -quality in a L4 CMM environment (i.e., approx 20 defects per million lines of code. This represents very high quality). 5 Approaches such as the CMM or SPICE (ISO 15504) focus mainly on the management and organizational practices required in software engineering. The emphasis is on deﬁning and follow- ing the software process. In practice, there is often insufﬁcient technical detail on requirements, 106 4 Software Engineering Fig. 4.2 Fred Brooks Photo by Dan Sears. the effectiveness of the management, engineering and organization practices related to software engineering. The use of mathematical techniques is complementary to a maturity approach such as the Capability Maturity Model (CMM). The CMM allows the mathematical techniques to be properly piloted to verify that the approach suits the company, and that superior results will be achieved by using these methods. The bottom line for a software company is that the use of these approaches should provide a cost-effective solution. The CMM also includes practices to assist with a sound deployment of a new process. 4.2 What Is Software Engineering? Software engineering involves multi-person construction of multi-version programs. The IEEE 610.12 deﬁnition of Software Engineering is: design, coding and testing in the models, as the models focus on what needs to be done rather how it should be done. 4.2 What Is Software Engineering? 107 Deﬁnition 4.1 (Software Engineering) Software engineering is the application of a systematic, disciplined, quantiﬁable approach to the development, operation, and