and that it was not suitable for serious programming. The deﬁciencies listed by Kernighan were addressed in later versions of the language. However, by then a new language called C had been developed at Bell Laboratories in the United States, and this language was to become very popular in industry. The C language is a general purpose and a systems programming language. It was developed by Dennis Ritchie and Ken Thompson in the early 1970s, and it was based on two earlier languages namely B and BCPL. The C language was originally designed to write the kernel for the UNIX oper- ating system, and C and UNIX often go hand in hand. Assembly languages had traditionally been used for systems programming, and the success of C in writ- ing the kernel of UNIX led to its use on several other operating systems such as Windows and Linux. C also inﬂuenced later language development (especially the development of C++). It is the most commonly used programming language for system programming, and it is also used for application development. It includes a number of the features of Pascal. The programmer’s bible for the original ver- sion of C is in [KeR:78], and the later ANSI deﬁnition of the language is in [KeR:88]. The original design goals of C were to provide low level access to memory, and efﬁcient compilation with only a few machine language instructions for each of its core language elements. The language provided low-level capabilities, and it also aimed to assist with portability and machine-independence. A program that is written with portability in mind, and is compliant with respect to the ANSI C stan- dards, may be compiled for a very wide variety of computer platforms and operating systems with minimal changes to its source code. The C language is now available on a wide range of platforms. C is a procedural programming language and includes conditional statements such as the if statement, the switch statement, iterative statements such as the while statement or do statement, and the assignment statement. r If Statement if (A == B) A = A + 1; else A = A - 1;8 8 The semi-colon in Pascal is used as a statement separator, whereas it is used as a statement terminator in C. 3.3 Imperative Programming Languages 85 r While Statement while (A > B) A = A - 1; r Do Statement9 do A := A + 1; while (A < 5); r Assignment Statement i = i + 1; r Switch Statement10 switch (expr) { case label1: A = 3; break;11 case label2: B = 2; break; default: A = B + 1; break; } One of the ﬁrst programs that people write in C is the Hello world program.12 This program displays Hello World on the screen. 9 The Do Statement is similar to Pascal’s Repeat statement, and the statement in the body of the Do statement is executed at least once. 10 The Switch statement is similar to Pascal’s Case statement. The main difference is that C includes a default case which is executed if none of the other labels are satisﬁed. 11 The break statement causes an exit from the nearest enclosing switch statement. 12 The Hello world program is written slightly differently in ANSI C. #include <stdio.h> void main() { printf("Hello World n"); } 86 3 Computer Programming Languages main() { printf("Hello World\n"); } C includes several pre-deﬁned data types including integers and ﬂoating point num- bers. r int (integer) r long (long integer) r ﬂoat (ﬂoating point real) r double (double precision real) C allows more complex data types to be created using structs (similar to records in Pascal). The language allows the use of pointers to access memory locations, and the use of pointers provides ﬂexibility. This allows the memory locations to be directly referenced and modiﬁed. For example: int x; int *ptr_x; x = 4; ptr_x = & x; *ptr_x =5; The address (or location in memory) of the variable x is given by &x. The variable ptr x is then assigned to the address of x. C allows the content referenced by the pointer to be modiﬁed: i.e., *ptr x = 5 assigns 5 to the memory location referenced by ptr x. This has the effect of assigning 5 to x. C is a block structured language, and a program is structured into functions (or blocks). Each function block contains its own variables and functions. A functions may call itself (i.e., recursion is allowed). C has been criticized on a number of grounds. One key criticism of the language