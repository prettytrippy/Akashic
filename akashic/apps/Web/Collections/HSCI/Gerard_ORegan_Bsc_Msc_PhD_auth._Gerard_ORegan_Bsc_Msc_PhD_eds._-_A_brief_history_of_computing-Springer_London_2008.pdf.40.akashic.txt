r b ∈ is the blank symbol (This is the only symbol that is allowed to occur inﬁnitely often on the tape during each step of the computation). r  is the set of input symbols and is a subset of  (it does not include the blank symbol b). r  : Q × →Q ×× {L, R} is the transition function. This is a partial function called where L is left shift, R is right shift. r q0 ∈Q is the initial state. r F ⊆Q is the set of ﬁnal or accepting states. The Turing machine is very simple machine, and it is equivalent to an actual physical computer in the sense that it can compute exactly the same set of functions. A Turing machine is much easier to analyse and prove things about than a real computer. However, Turing machines are not suitable for programming, and therefore do not provide a good basis for studying programming and programming languages. A Turing machine is essentially a ﬁnite state machine (FSA) with an unbounded tape. The machine may read from and write to the tape. The FSA is essentially the control unit of the machine, and the tape is essentially the store. The tape is potentially inﬁnite and unbounded, whereas real computers have a large but ﬁnite store. However, the store in a real computer may be extended with backing tapes and disks, and in a sense may be regarded as unbounded. However, the maximum amount of tape that may be read or written within n steps is n. A Turing machine has an associated set of rules that deﬁnes its behaviour, and the actions that a machine may perform are deﬁned by the transition function. A Turing machine may be programmed to solve any problem for which there is an algorithm. However, if the problem is unsolvable then the machine will either stop or compute forever. The solvability of a problem may not be determined beforehand. There is, of course, some answer (i.e., either the machine halts or it computes forever). Turing showed that there was no solution to the Entscheidungsproblem problem (i.e., the decision problem) posed by David Hilbert. This was discussed earlier, and it asserted that the truth or falsity of a mathematical problem can always be deter- mined, and by a mechanical procedure. Hilbert was asserting that ﬁrst-order logic is decidable: i.e., there is a decision procedure to determine if a sentence in the formula is valid. Turing was skeptical on the decidability of ﬁrst-order logic, and he 50 2 Foundations believed that whereas some problems may be solved, some others cannot be solved. The Turing machine played a key role in refuting Hilbert’s claim of the decidabil- ity of ﬁrst-order logic, as whatever is computable may be computed on a Turing Machine. The question as to whether a given Turing machine halts or not can be formulated as a ﬁrst-order statement. If a general decision procedure exists for ﬁrst-order logic, then the statement of whether a given Turing machine halts or not is within the scope of the decision algorithm. However, Turing had already proved that the halting prob- lem for Turing machines is not computable: i.e., it is not possible algorithmically to decide whether a give Turing machine will halt or not. Therefore, there is no general algorithm that can decide whether a given Turing machine halts. In other words, there is no general decision procedure for ﬁrst-order logic. The only way to determine whether a statement is true or false is to try to solve it. Turing also introduced the concept of a Universal Turing Machine and this machine is able to simulate any other Turing machine. Turing’s results on com- putability were proved independently of Church’s lambda calculus equivalent results in computability.15 Turing’s studied in Priceton University in 1937 and 1938 and was awarded a PhD from the university in 1938. He was awarded his PhD at the age of 25, and his research supervisor was Alonzo Church.16 His results on computability and decidability were proved when he was just 23. He returned to Cambridge in 1939 and attended lectures by Wittgenstein. However, Turing and Wittgenstein disagreed on formalism and on mathematics. 2.5.2 Enigma Codes Turing and others contributed to Britain’s defence and to the eventual defeat of Nazi Germany during the second world war. Turing’s contribution was the role that he played at Bletchey Park in breaking the Enigma codes. These codes were used by the Germans for the transmission of naval messages. They allowed messages to be passed secretly to submarines using encryption, and this was designed to prevent third parties from intercepting the messages. The plaintext (i.e., the original mes- sage) was converted by the Enigma machine (Fig. 2.12) into the encrypted text, and