avoid ambiguities present in natural language. My experience is that formal speciﬁ- cations such as Z or VDM are reasonably easy to use. Clearly, a formal speciﬁcation should be subject to peer review to ensure that it is correct. New formalisms may potentially add value in expressive power but need to be intuitive to be usable by practitioners. The advantage of classical mathematics is that it is familiar to students. 4.5.1 Why Should We Use Formal Methods? There is a very strong motivation to use best practices in software engineering in order to produce software adhering to high quality standards. Flaws in software may at best cause minor irritations to customers, and in a worst-case scenario could potentially cause major damage to a customer’s business or loss of life. Conse- quently, companies will employ best practices to mature their software processes. Formal methods are one leading-edge technology which studies suggest may be of beneﬁt to companies who wish to minimize the occurrence of defects in software products. 120 4 Software Engineering Table 4.3 Criticisms of formal methods No. Criticism 1. Often the formal speciﬁcation (written for example in Z or VDM) is as difﬁcult to read as the program and it therefore does not add value15. 2. Many formal speciﬁcations are wrong.16 3. Formal methods are strong on syntax but provide little assistance in deciding on what technical information should be recorded using the syntax.17 4. Formal speciﬁcations provide a model of the proposed system. However, a precise unambiguous mathematical statement of the requirements is what is needed. It should be clear what is required and what is not required.18 5. Step-wise reﬁnement is unrealistic.19 It is like, for example, deriving a bridge from the description of a river and the expected trafﬁc on the bridge. Reﬁning a formal speciﬁcation to a program is like reﬁning a blueprint until it turned into a house. This is hardly realistic and there is always a need for a creative step in design. 6. Many unnecessary mathematical formalisms have been developed in formal methods rather than using the available classical mathematics.20 The use of formal methods is mandatory in certain circumstances. The Ministry of Defence in the United Kingdom issued two safety-critical standards in the early 1990s related to the use of formal methods in the software development lifecycle. The ﬁrst is Defence Standard 0055, i.e., Def Stan 00-55, “The Procurement of safety critical software in defense equipment” [MOD:91a]. This standard makes it manda- tory to employ formal methods in safety-critical software development in the United Kingdom; and mandates the use of formal proof that the most crucial programs correctly implement their speciﬁcations. The other Defence Standard is Def Stan 00-56 “Hazard analysis and safety classiﬁcation of the computer and programmable 15 Of course, others might reply by saying that some of Parnas’s tables are not exactly intuitive, and that the notation he employs in some of his tables is quite unfriendly. The usability of all of the mathematical approaches needs to be enhanced if they are to be taken seriously by industrialists. 16 Obviously, the formal speciﬁcation must be analyzed using mathematical reasoning and tools to ensure its correctness. The validation of a formal speciﬁcation can be carried out using mathemat- ical proof of key properties of the speciﬁcation; software inspections; or speciﬁcation animation. 17 Approaches such as VDM include a method for software development as well as the speciﬁca- tion language. 18 Models are extremely valuable as they allow simpliﬁcation of the reality. A mathematical study of the model demonstrates whether it is a suitable representation of the system. Models allow properties of the proposed requirements to be studied prior to implementation. 19 Step-wise reﬁnement involves rewriting a program ad nauseum with each reﬁnement step pro- duces a more concrete speciﬁcation (that includes code and formal speciﬁcation) until eventually the detailed code is produced. However, tool support may make reﬁnement easier. The reﬁnement calculus offers a very rigorous approach to develop correct programs from formal speciﬁcations. However, it is debatable whether it is cost effective in mainstream software development. 20 My preference is for the use of classical mathematics for speciﬁcation. However, I see approaches such as VDM or Z as useful as they do add greater rigour to the software development process than is achieved with the use of natural language. In fact, both Z and VDM are reasonably easy to learn, and there have been some good results obtained by their use. I prefer to avoid the