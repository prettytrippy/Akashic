Any computable function can be expressed and evaluated using lambda calcu- lus or Turing machines. The question of whether two expressions in the lambda calculus are equivalent cannot be solved by a general algorithm, and this result was proved prior to the decidability problem. Lambda calculus uses transformation rules, and one of these rules is variable substitution. The original calculus developed by Church was untyped; however, typed lambda calculi have been developed in recent years. Lambda calculus has inﬂuenced functional programming languages such as Lisp, ML and Haskell. Functional programming uses the notion of higher-order functions. Higher-order take other functions as arguments, and may return functions as results. The deriva- tive function d/dx f (x) = f ′(x) is a higher order function. It takes a function as an argument and returns a function as a result. The derivative of the function Sin(x) is given by Cos(x). Higher-order functions allow currying which is a technique devel- oped by Sch¨onﬁnkel. It allows a function with several arguments to be applied to each of its arguments one at a time, with each application returning a new (higher- order) function that accepts the next argument. John McCarthy developed LISP at MIT in the late 1950s, and this language includes many of the features found in modern functional programming lan- guages.21 The functional programming language Scheme built upon the ideas in LISP, and simpliﬁed and improved upon the language. Kenneth Iverson developed APL22 in the early 1960s and this language inﬂu- enced Backus’s FP programming language. Backus described how functional pro- grams could be built up following the principle of compositionality. The ML programming language was created by Robin Milner at the University of Edinburgh in the early 1970s. David Turner developed the language Miranda at 18 Higher order functions are functions that take functions as arguments or return a function as a results. They are known as operators (or functionals) in mathematics, and one example is the derivative function dy/dx that takes a function as an argument and returns a function as a result. 19 Monads are used in functional programming to express input and output operations without introducing side effects. The Haskell functional programming language makes use of this feature. 20 This is the most common algorithm used to perform type inference. Type inference is concerned with determining the type of the value derived from the eventual evaluation of an expression. 21 Lisp is a multi-paradigm language rather than a functional programming language. 22 Iverson received the Turing Award in 1979 for his contributions to programming language and mathematical notation. The title of his Turing award paper was “Notation as a tool of thought”. 3.5 Functional Programming Languages 93 the University of Kent in the mid-1980s. The Haskell programming language was released in the late 1980s. 3.5.1 Miranda Miranda was developed by David Turner at the University of Kent, England in the mid-1980s [Turn:85]. It is a non-strict functional programming language: i.e., the arguments to a function are not evaluated until they are actually required within the function being called. This is also known as lazy evaluation, and one of its main advantages is that it allows an inﬁnite data structures to be passed as an argument to a function. Miranda is a pure functional language in that there are no side-effect features in the language. The language has been used for: r Rapid prototyping r Speciﬁcation language r Teaching Language A Miranda program is a collection of equations that deﬁne various functions and data structures. It is a strongly typed language with a terse notation. z = sqr p / sqr q sqr k = k ∗k p = a + b q = a −b a = 10 b = 5 The scope of a formal parameter (e.g., the parameter k above in the function sqr) is limited to the deﬁnition of the function in which it occurs. One of the most common data structures used in Miranda is the list. The empty list is denoted by [ ], and an example of a list of integers is given by [1, 3, 4, 8]. Lists may be appended to by using the “++” operator. For example: [1, 3, 5] ++ [2, 4] is [1, 3, 5, 2, 4]. The length of a list is given by the “#” operator: # [1, 3] = 2 The inﬁx operator “:” is employed to preﬁx an element to the front of a list. For example: 5 : [2, 4, 6] is equal to [5, 2, 4, 6] 94 3 Computer Programming Languages