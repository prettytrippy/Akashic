assertion states the conditions that muse be true for execution of the program to take place, and the exit assertion essentially describes what must be true when the program terminates: i.e., what the program computes. A key insight of Floyd was his recognition of the principle that if it can be shown that the assertions immediately following each step are consequences of the asser- tions immediately preceding it, then the assertions at the end of the program will be true, provided the appropriate assertions were true at the beginning of the program. Floyd’s simple but very powerful principle was published in “Assigning Mean- ings to Programs” in 1967 [Flo:67]. This paper was to inﬂuence Hoare’s work on preconditions and “post-conditions, and led to what would become known as Hoare logic [Hoa:69]. Floyd’s paper also presented a formal grammar for ﬂowcharts, together with rigorous methods for verifying the effects of basic actions like assignments. Floyd also did research work on compilers and on the translation of programming languages into machine languages. This included work on the theory of parsing [Flo:63, Flo:64], and on the theory of compilers. His work led to improved algo- rithms for parsing sentences and phrases in programming languages. He worked closely with Donald Knuth, and reviewed Knuth’s “The Art of Computer Program- ming”.13 Floyd received the Turing Award in 1978 for his inﬂuence on method- ologies for the creation of efﬁcient and reliable software, and for his contribution to the theory of parsing, the semantics of programming languages, the analysis of algorithms and for program veriﬁcation. Hoare logic was developed by the well-known British computer scientist, Hoare. It is a formal system of logic used for programming semantics and for program 13 The Art of Computer Programming [Knu:97] was originally published in three volumes. Volume 1 appeared in 1968; Volume 2 in 1969; and Volume 3 in 1973. A fourth volume is being prepared by Knuth. 4.3 Early Software Engineering 115 veriﬁcation. It was originally published in Hoare’s 1969 paper “An axiomatic basis for computer programming”, and has subsequently been reﬁned by Hoare and oth- ers. Hoare’s approach provides a logical methodology for precise reasoning about the correctness of computer programs. His approach uses the rigour of mathematical logic (Fig. 4.9). Hoare’s early work in computing was in the early 1960s, when he worked as a programmer at Elliott Brothers in the United Kingdom. His ﬁrst assignment was the implementation of a subset of the ALGOL 60 programming language. This language had been designed by an international committee, and its concise speciﬁcation was twenty-one pages long [Nau:60]. Peter Naur’s report gave the implementer of the language accurate information to implement a compiler for the language, and there was no need for the implementer to communicate with the language designers. The grammar of ALGOL 60 was speciﬁed in Backus Naur Form (BNF) and this was based on the work of Noam Chomsky. The success of BNF in specifying the syntax of ALGOL 60 led to its use in the speciﬁcation of the syntax of other pro- gramming languages, and to a growth in research in the theory of formal semantics Fig. 4.9 C.A.R. Hoare 116 4 Software Engineering of programming languages. One view that existed at that time was that the meaning of a language should be given by a compiler and its target implementation. Hoare argued that the meaning of a language should be independent of its implementa- tion on the machine that the language is to run on. He preferred to avoid opera- tional approaches to programming language semantics, and proposed instead the axiomatic approach. Hoare became professor of Queens University in Belfast in 1968 and was inﬂu- enced by Floyd’s 1967 paper that applied assertions to ﬂowcharts. Hoare recognised that this provided an effective method for proving the total correctness of programs, and he built upon Floyd’s approach to cover all of the familiar constructs of high- level programming languages. This led to the axiomatic approach to deﬁning the semantics of every statement in a programming language. The approach consists of axioms and proof rules. He introduced what has become known as the Hoare triple, and this describes how the execution of a fragment of code changes the state. A Hoare triple is of the form: P {Q} R where P and R are assertions and Q is a program or command. The predicate P is called the precondition, and the predicate R is called the postcondition.