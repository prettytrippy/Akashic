to take place. Most commercial programming languages are imperative languages, with interest in functional programming languages and relational programming lan- guages being mainly academic. Imperative programs tend to be more difﬁcult to reason about due to the change of state. High-level imperative languages use program variables, and employ commands such as assignment statements, conditional commands, iterative commands, and calls to procedures. An assignment statement performs an operation on information located in memory, and stores the results in memory. The effect of an assignment statement is usually to change the program state. A conditional statement allows a statement to be executed only if a speciﬁed condition is satisﬁed. Iterative statements allow a statement (or group of statements) to be executed a number of times. The compiler converts the source code of the high-level programming language into the machine code of the computer. The machine code is then executed on the hardware of the computer. A change of state is, in effect, a change to the contents of memory, and the machine code of the computer has instructions to modify the contents of memory as well as commands to jump to a location in memory. Assembly languages and machine code are imperative languages. High-level imperative languages allow the evaluation of complex expressions. These may consist of arithmetic operations and function evaluations, and the result- ing value of the expression is assigned to memory. The earliest imperative languages were machine code. FORTRAN was developed in the mid-1950s, and it was one of the earliest pro- gramming languages. ALGOL was developed in the late 1950s and 1960s, and it became a popular language for the expression of algorithms. COBOL was designed 78 3 Computer Programming Languages in the late 1950s as a programming language for business use. BASIC (Beginner’s All Purpose Symbolic Instruction Code) was designed by George Kemeny and Tom Kurtas in 1963 as a teaching tool. Pascal was developed in the early 1970s as a teaching language by the Swiss computer scientist, Niklaus Wirth. Wirth received a Turing award in 1984 for his contributions to programming languages and software engineering. The C programming language was developed in the early 1970s at Bell Laboratories in the United States. It was designed as a systems programming language for the Unix operating system. Jean Ichbiah and others at Honeywell began designing Ada for the United States military in 1974, and the speciﬁcation of the language was completed in 1983. Object-oriented programming became popular in the 1980s. These lan- guages were imperative in style, but included features to support objects. Bjarne Stroustrup designed an object-oriented extension of the C language called C++, and this was ﬁrst implemented in 1985. Java was released by Sun Microsystems in 1996. 3.3.1 Fortran and Cobol FORTRAN (FORmula TRANslator) was developed by John Backus at IBM in the mid-1950s for the IBM 704 computer. It is a compiled high-level imperative lan- guage and includes named variables, complex expressions, and subprograms. It was designed for scientiﬁc and engineering applications, and it became the most impor- tant programming language for these applications. There have been many versions of Fortran since then, including Fortran II, Fortran IV, Fortran 66, Fortran 77 and Fortran 90. The ﬁrst Fortran compiler was available in 1957. The main statements of the language include: r Assignment Statements (using the = symbol) r IF Statements r Goto Statements r DO Loops Fortran II was developed in 1958, and it introduced sub-programs and functions to support procedural (or imperative) programming. Imperative programming speci- ﬁes the steps the program must perform, including the concept of procedure calls, where each procedure (or subroutine) contains computational steps to be carried out. Any given procedure might be called at any point during a program’s exe- cution, including calls by other procedures or by itself. However, recursion was not allowed until Fortran 90. Fortran 2003 provides support for object-oriented programming. The basic types supported in Fortran include Boolean, Integer, and Real. Support for double precision and complex numbers was added later. The language included relational operators for equality (.EQ.), less than (.LT.), and so on. It was good at handling numbers and computation, and this was especially useful for mathematical 3.3 Imperative Programming Languages 79 and engineering problems. The following code (written in Fortran 77) gives a ﬂavour of the language. PROGRAM HELLOWORLD C FORTRAN 77 SOURCE CODE COMMENTS FOR HELLOWORLD PRINT ‘(A)’, ‘HELLO WORLD’ STOP END Fortran remains a popular programming language for some of the most intensive