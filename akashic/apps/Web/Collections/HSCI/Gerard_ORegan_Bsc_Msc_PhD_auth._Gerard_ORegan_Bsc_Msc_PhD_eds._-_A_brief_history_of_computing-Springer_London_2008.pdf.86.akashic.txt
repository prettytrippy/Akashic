The uniﬁed modeling language (UML) is a visual modeling language for software systems, and it facilitates the understanding of the architecture of the system, and in managing the complexity of large systems. It was developed by Jim Rumbaugh, Grady Booch, and Ivar Jacobson [Jac:04] as a notation for modeling object-oriented systems. UML allows the same information to be presented in many different ways, and there are several UML diagrams providing different viewpoints of the system. Use cases describe scenarios or sequences of actions for the system from the user’s viewpoint. A simple example is the operation of an ATM machine. Typical user operations at an ATM machine include the balance inquiry operation, the withdrawal of cash, and the transfer of funds from one account to another. These operations can be described with UML use-case diagrams. Class and object diagrams are a part of UML and the object diagram is related to the class diagram in that the object is an instance of the class. There will generally be several objects associated with the class. The class diagram describes the data structure and the allowed operations on the data structure. The concept of class and objects are taken from object-oriented design. Two key classes are customers and accounts for an ATM system, and this includes the data structure for customers and accounts, and also the operations on customers and accounts. The operations include adding or removing a customer and operations to debit or credit an account. The objects of the class are the actual customers of the bank and their corresponding accounts. Sequence diagrams show the interaction between objects/classes in the system for each use case. The sequences of interactions between objects for an ATM oper- ation to check the balance of an account is illustrated in a sequence diagram that illustrates: r Customer inserts the card into the ATM machine. r PIN number is requested by the ATM machine. 138 4 Software Engineering r The customer then enters the PIN number. r The ATM machine contacts the bank for veriﬁcation of the number. r The bank conﬁrms the validity of the number and the customer then selects the balance inquiry. r The ATM contacts the bank to request the balance of the particular account and the bank sends the details to the ATM machine. r The balance is displayed on the screen of the ATM machine. r The customer then withdraws the card. UML activity diagrams are similar to ﬂow charts. They are used to show the sequence of activities in a use case and include the speciﬁcation of decision branches and parallel activities. The sequence of activities for the ATM operation to check the balance of an account may be shown in an activity diagram that illustrates: r Card insertion r Wait for PIN to be entered. r Validate PIN. r If Valid then check balance on account and Display balance. r Otherwise return to 1. State diagrams (or state charts) show the dynamic behaviour of a class and how different operations result in a change of state. There is an initial state and a ﬁnal state, and the different operations result in different states being entered and exited. There are several other UML diagrams including the collaboration diagram which is similar to the sequence diagram except that the sequencing is shown via a number system. UML offers a rich notation to model software systems and to understand the proposed system from different viewpoints. The main advantages of UML are listed in Table 4.4. There is more detailed information on UML in [ORg:06]. 4.5.12.1 Miscellaneous Speciﬁcation Languages The RAISE (Rigorous Approach to Industrial software Engineering) project was a European ESPRIT-funded project. Its objective [Geo:91] was to produce a method Table 4.4 Advantages of UML Advantages of UML State of the art visual modeling language with a rich expressive notation. Study of the proposed system before implementation Visualization of architecture design of the system. Mechanism to manage complexity of a large system. Visualization of system from different viewpoints. Enhanced understanding of implications of user behavior. Use cases allow description of typical user behavior. A mechanism to communicate the proposed behaviour of the software system. This describes what it will do and what to test against. 4.5 Formal Methods 139 for the rigorous development of software, based on a wide-spectrum speciﬁcation language, and accompanied by tool support. It considered standard VDM to be deﬁ- cient, in that it lacked modularity, and as it was unable to deal with concurrency.The RAISE speciﬁcation language (RSL) was designed to address these deﬁciencies, and an algebraic approach is adopted. Comprehensive support is available from the RAISE tools. The RAISE method (as distinct from its speciﬁcation language) covers the soft- ware lifecycle, from requirements analysis to code generation. This is achieved via a number of design steps, in which the speciﬁcation is gradually made more con-