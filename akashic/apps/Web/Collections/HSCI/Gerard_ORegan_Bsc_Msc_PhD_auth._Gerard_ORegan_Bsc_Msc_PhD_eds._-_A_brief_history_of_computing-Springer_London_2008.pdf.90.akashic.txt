The time required to implement the CMMI in an organization depends on the cur- rent maturity and size of the organization. It generally takes 1–2 years to implement maturity level 2, and a further 1–2 years to implement level 3. 146 4 Software Engineering 4.8 Review Questions 1. Describe the crisis in software in the 1960s and the birth of software engineering. 2. Describe waterfall and spiral lifecycle models including their advantages and disadvantages. 3. Discuss Floyd’s contribution to software engineering and how it led to Hoare’s axiomatic semantics. 4. Describe the mathematics that is potentially useful in software engineer- ing. 5. Describe formal methods and its applications to software engineering. Explain when their use should be considered in software engineering. 6. Discuss any tools to support formal methods that you are familiar with. 7. Discuss the similarities and differences between Z and VDM. 8. Discuss the similaritities and differences between the model-oriented approach and the axiomatic approach to formal methods. 9. Discuss UML and its applicability to software engineering. 10. Discuss the applicability of software inspections and testing to software engineering. 11. Discuss the Capability Maturity Model and its applicability to software engineering. 4.9 Summary This chapter discussed the birth of software engineering from the “software crisis” that existed in the 1960s. The computer scientists that attended the ﬁrst software engineering conference at Garmisch in Germany recognised the need for sound methodologies to design, develop and maintain software to meet customer needs. Classical engineering has a successful track record in building high-quality prod- ucts that are safe to use. It is therefore natural to consider using an engineering approach to developing software, and this involves identifying the customer require- ments, carrying out a rigorous design to meet the requirements, developing and coding a solution to meet the design, and conducting appropriate inspections and testing to verify the correctness of the solution. Mathematics plays a key role in engineering to assist with design and veriﬁcation of software products. It is therefore reasonable to apply appropriate mathematics in software engineering (especially for safety critical systems) to assure that the delivered systems conform to the requirements. The extent to which mathematics will need to be used will vary, and in many cases peer reviews and testing will be sufﬁcient to build quality into the software product. In other cases, and especially with safety and security critical applications, it is desirable to have the extra assur- ance that may be provided by mathematical techniques. 4.9 Summary 147 Various mathematical approaches were considered including Z, VDM and CSP. The propositional calculus and predicate calculus were discussed as well as the nature of proof and the importance of tools (and theorem provers). The uniﬁed modeling language (UML) has become popular in recent years. It is a visual modeling language for software systems and facilitates an understanding of the architecture of the system, and in managing the complexity of large systems. There is a lot more to the successful delivery of a project than just the use of mathematics or peer reviews and testing. Sound project management and quality management practices are essential, as a project that is not properly managed will suffer from schedule, budget or cost overruns as well as problems with quality. Maturity models such as the CMMI can assist organisations in maturing key management and engineering practices that are essential for the successful delivery of high-quality software. The use of the CMMI helps companies in their goals to deliver high-quality software systems that are consistently on time and consistently meet business requirements. Chapter 5 Artiﬁcial Intelligence and Expert Systems Key Topics Turing Test Searle’s Chinese Room Philosophical Problems in AI Cognitive Psychology Linguistics Logic and AI Robots Cybernetics Neural Networks Expert Systems 5.1 Introduction The ultimate goal of Artiﬁcial Intelligence is to create a thinking machine that is intelligent, has consciousness, has the ability to learn, has free will, and is ethical. The ﬁeld involves several disciplines such as philosophy, psychology, linguistics, machine vision, cognitive science, mathematics, logic and ethics. Artiﬁcial Intelli- gence is a young ﬁeld and the term was coined by John McCarthy and others in 1956. Alan Turing had earlier devised the Turing Test as a way to test the intelli- gent behaviour of a machine. There are deep philosophical problems in Artiﬁcial Intelligence, and some researchers believe that its goals are impossible or incoher- ent. These views are shared by Hubert Dreyfus and John Searle. Even if Artiﬁcial Intelligence is possible there are moral issues to consider such as the exploitation of artiﬁcial machines by humans, and whether it is ethical to do this. Weizembaum1 has argued that Artiﬁcial Intelligence is unethical.