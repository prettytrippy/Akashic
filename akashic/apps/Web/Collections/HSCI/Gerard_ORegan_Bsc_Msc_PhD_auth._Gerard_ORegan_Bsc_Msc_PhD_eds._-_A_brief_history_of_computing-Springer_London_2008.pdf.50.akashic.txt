21 The Harvard Mark I was a large-scale automatic digital computer developed by Howard H. Aiken (and team) and built by IBM in America between 1939 and 1944. IBM marketed it as the ASCC machine. Grace Murray Hopper was a programmer on the Mark 1. 2.10 Summary 71 Zuse was completely unaware of any computer-related developmentsin Germany or in other countries until a very late stage. He independently conceived and imple- mented the principles of modern digital computers in isolation. 2.9 Review Questions 1. Describe Boolean Algebra. 2. Describe the Difference Engine. 3. Describe the Analytic Engine. 4. Discuss the Turing Machine. 5. Discuss the Turing Test. 6. Discuss the Enigma Machine and the work done at Bletchey Park. 7. Discuss the application of Boolean Algebra to Switching Circuits. 8. Discuss Information Theory. 9. Discuss Shannon’s contribution to Cryptology. 10. Discuss the Von Neumann Architecture. 2.10 Summary This chapter considered the contributions of important yures in the history of com- puting including Boole, Babbage, Shannon, Turing and von Neumann. George Boole was an English mathematician who developed Boolean Algebra which is the foundation of all modern computers. Charles Babbage did pioneering work on the Difference Engine. This was essentially a mechanical calculator (analogous to modern electronic calculators), and it was designed to compute polynomial functions. He also designed the Ana- lytic Engine, and this was the design of the world’s ﬁrst mechanical computer. It included a processor, memory, and a way to input information and output results. Turing is famous for his work on a theoretical mathematical machine termed the “Turing Machine”, and he proved that anything that is computable is computable by this theoretical machine. He also made contributions to the cryptography and to Artiﬁcial Intelligence. He devised the famous “Turing Test” that is a test of machine intelligence. Claude Shannon was an American mathematician and engineer who made funda- mental contributions to computing. He was the ﬁrst person to see the applicability of Boolean Algebra to simplify the design of circuits and telephone routing switches, and his insight of using the properties of electrical switches to do Boolean logic is the basic concept that underlies all electronic digital computers. His later work at Bell Labs laid the foundation of modern Information Theory and modern Cryptog- raphy. 72 2 Foundations Von Neumann was a Hungarian mathematician who made fundamental contri- butions to mathematics, physics and computer science. He gave his name to the von Neumann architecture that is used in almost all computers. Zuse was a German engineer who developed the Z3 machine in 1941. He also developed the Plankalk¨ul high-level programming language in 1946. Chapter 3 Computer Programming Languages Key Topics Generations of Programming Languages Imperative Languages ALGOL Fortran and Cobol Pascal and C Object-Oriented Languages Functional Programming Languages Logic Programming Languages Syntax and Semantics 3.1 Introduction Computer programming languages have evolved from the early days of computing. The earliest programming languages used machine code to instruct the computer, and the next development was to use low-level assembly languages to represent machine language instructions. These were then translated to the machine code by an assembler. The next step was to develop high-level programming languages such as Fortran and Cobol. A ﬁrst-generation programming language (or 1GL) is a machine-level program- ming language that consists of 1s and 0s. Their main advantage was execution speed and efﬁciency. They could be directly executed on the central processing unit (CPU) if the computer, and there is no need to employ a compiler or assembler to translate from a high-level language or assembly language to the machine code. However, writing in a machine language was difﬁcult and error prone as it involved writing a stream of binary numbers. This made the programming language difﬁcult to learn and difﬁcult to correct should any errors occur. The programming instructions were entered through the front panel switches of the computer system, and adding new code was difﬁcult. Further, the machine code was not portable as the 73 74 3 Computer Programming Languages machine language for one computer could differ signiﬁcantly from that of another computer. Often, the program needed to be totally re-written for the new computer. First generation languages are mainly of historical interest today, and were mainly used on the early computers. A program written in a high-level programming language is generally translated by the compiler1 into the machine language of the target computer for execution. Second generation languages, or 2GL, are low-level assembly languages that are speciﬁc to a particular computer and processor. However, assembly languages are unlike ﬁrst-generation programming languages in that the assembly code can be