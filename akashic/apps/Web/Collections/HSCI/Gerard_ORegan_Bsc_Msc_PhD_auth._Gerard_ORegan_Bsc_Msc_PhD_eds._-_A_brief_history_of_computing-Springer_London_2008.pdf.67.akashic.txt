maintenance of software; that is, the application of engineering to software, and the study of such approaches. Software engineering includes: 1. Methodologies to determine requirements, design, develop, implement and test software to meet customers needs. 2. The philosophy of engineering: i.e., an engineering approach to developing soft- ware is adopted. That is, products are properly designed, developed, tested, with quality and safety properly addressed. 3. Mathematics may be employed to assist with the design and veriﬁcation of soft- ware products. The level of mathematics to be employed will depend on the safety critical nature of the product, as systematic peer reviews and testing are often sufﬁcient in building quality into the software product. 4. Sound project management and quality management practices are employed. Software engineering requires the engineer to state precisely the requirements that the software product is to satisfy, and then to produce designs that will meet these requirements. Engineers should start with a precise description of the problem to be solved; they then proceed to producing a design and validate the correctness of the design; ﬁnally, the design is implemented and testing is performed to verify its correctness with respect to the requirements. The software requirements should clearly state what is required, and it should also be evident what is not required. Engineers produce the product design, and then analyse their design for cor- rectness. This analysis may include mathematics and software inspections, and this analysis is essential to ensure that the design is correct. The term engineer is generally applied only to people who have attained the necessary education and competence to be called engineers, and who base their practice on mathematical and scientiﬁc principles. Often in computer science the term engineer is employed loosely to refer to anyone who builds things, rather than to an individual with a core set of knowledge, experience, and competence. Parnas6 is a strong advocate of a classical engineering approach, and argues that computer scientists should have the right education to apply scientiﬁc and mathe- matical principles to their work. Software engineers need to receive an appropri- ate education in mathematics and design, to enable them to be able to build high- quality and safe products. He has argued that computer science courses often tend to emphasize the latest programming language rather than the essential engineering foundations. Therefore, the material learned in a computer science course is often outdated shortly after the student graduates. That is, the problem is that students are generally taught programming and syntax, but not how to design and analyse 6 Parnas’s key contribution to software engineering is information hiding which is used in the object-oriented world. He has also done work (mainly of academic interest) on mathematical approaches to software quality. 108 4 Software Engineering software. Computer science courses tend to include a small amount of mathematics whereas mathematics is a signiﬁcant part of an engineering course. The engineering approach to the teaching of mathematics is to emphasize its application and espe- cially the application to developing and analysing product designs. The mathematics that software engineering students need to be taught includes sets, relations, func- tions, mathematical logic, and ﬁnite state machines. The emphasis in engineering is on the application of mathematics to solve practical problems, rather than theoretical mathematics for its own sake. The consequence of the existing gap in the education of current software engi- neers is that there is a need to retrain existing software engineers with a more solid engineering education.7 Software engineers need education on speciﬁcation, design, turning designs into programs, software inspections, and testing. The education should enable the software engineer to produce well-designed programs that will correctly implement the requirements. Parnas argues that software engineers have individual responsibilities as pro- fessional engineers.8 They are responsible for designing and implementing high- quality and reliable software that is safe to use. They are also accountable for their own decisions and actions,9 and have a responsibility to object to decisions that violate professional standards. Professional engineers have a duty to their clients to ensure that they are solving the real problem of the client. They need to precisely state the problem before working on its solution. Engineers need to be honest about current capabilities, and when asked to work on problems that have no appropriate technical solution, this should be stated honestly rather than accepting a contract for something that cannot be done. 7 Realistically, a mass re-education program for current software engineers is unrealistic and highly unlikely to take place. Any retraining program for current software engineers would need to mini- mize the impact on company time, as software companies in the new millennium are very focused on the bottom line, as they are working in a very competitive environment. This includes intense competition from the low cost software development locations in Eastern Europe and Asia as outsourcing of software development to such locations is an increasing trend. 8 The concept of accountability is not new; indeed the ancient Babylonians employed a code of