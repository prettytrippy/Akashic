a complete formal development from initial speciﬁcation to ﬁnal implementation 124 4 Software Engineering may be achieved, with every proof obligation justiﬁed, leading to a provably correct program. The IFAD Toolbox26 is a well-known support tool for the VDM-SL speciﬁcation language, and it includes support for syntax and type checking, an interpreter and debugger to execute and debug the speciﬁcation, and a code generator to convert from VDM-SL to C++. It also includes support for graphical notations such as the OMT/UML design notations. SDL is a speciﬁcation language which is employed in event driven real time systems. It is an object-orientated graphical formal language, and support for SDL is provided by the SDT tool from Telelogic. The SDT tool provides code generation from the speciﬁcation into the C or C++ programming languages, and the generated code can be used in simulations as well as in applications. Telelogic provides an ITEX tool which may be used with or independently of SDT. It allows the generation of a test suite from the SDL speciﬁcation, thereby speeding up the testing cycle. The RAISE tools are an integrated toolset including the RAISE speciﬁcation language (RSL) and a collection of tools to support software development including editors and translators from the speciﬁcation language to Ada or C++. There are many other tools available, including the Boyer Moore theorem prover, the FDR tool for CSP, the CADiZ tool for the Z speciﬁcation language, the Mural tool for VDM, the LOTOS toolbox for LOTOS speciﬁcations, and the PVS tool. Finally, various research groups are investigating methods and tools to assist the delivery of high-quality software. This includes a group led by Parnas at SQRL at the University of Limerick in Ireland,27 and this group is developing a table tool system to support tabular expressions which they believe will support engineers in specifying requirements. The suite of tools include tools for the creation of tables; tools to check consistency and completeness properties of tables; tools to perform table composition and tools to generate a test oracle from a table. 4.5.3.1 Formal Methods and Reuse Effective software reuse helps to improve software development productivity, and this is important in rapid application software development. The idea is to develop building blocks which may then be reused in future projects, and this requires high quality and reliable components. It is essential to identify the domains to which the component may be applied, and that a documented description exists of the actual behavior of the component and the circumstances in which it may be employed.28 26 The IFAD Toolbox has been renamed to VDMTools as IFAD sold the VDM Tools to CSK in Japan. The tools are expected to be available worldwide and will be improved further. 27 This group is being supported by Science Foundation Ireland with ε5–6 million of Irish taxpay- ers’ funds. It remains to be seen whether the results will be of beneﬁt to industrialists. 28 There is a lot of reusable software that has been developed but never reused. This is a key challenge that companies have to face if they wish to reduce their development costs, and deliver their products to market faster. Reducing development costs and faster delivery of products are two key drivers in today’s competitive environment. 4.5 Formal Methods 125 Effective reuse is typically limited to a particular domain, and there are reuse models to assist to assess the current reuse practices in the organization. This enables a reuse strategy to be developed and implemented. Systematic reuse is being researched in academia and industry, and the ROADS project was an EC funded project which included the European Software Institute (ESI) and Thompson as partners to investigate a reuse approach for domain-based software. The software product line approach [ClN:02] is proposed by the SEI. Formal methods have a role to play in software reuse also, as they offer enhanced conﬁdence in the correctness of the component, as well as providing an unambiguous formal description of the behavior of the particular component. The component may be tested extensively to provide extra conﬁdence in its correctness. A component is generally used in different environments, and the fact that a component has worked successfully in one situation is no guarantee that it will work successfully in the future, as there could be potential undesirable interaction between it and other components, or other software. Consequently, it is desirable that the behavior of the component be unam- biguously speciﬁed and fully understood, and that a formal analysis of component composition be performed to ensure that risks are minimized, and that the resulting software is of a high quality. There has been research into the formalization of components in both academia and industry. The EC funded SCORE research project conducted as part of the