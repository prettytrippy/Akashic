or B is true. These are as deﬁned in Table 2.2 Table 2.2 Truth tables for conjunction and disjunction A B A ∧B A B A ∨B T T T T T T T F F T F T F T F F T T F F F F F F Disjunction is also known as the “inclusive or” operation. There are other logical connectives such as implication, equivalence, “exclusive or”, and so on. For a more detailed explanation see [ORg:06]. The “not” operator (¬) is a unary operator such that ¬ A is true if A is false, and is false if A is true. It is given by the following truth table (Table 2.3). Table 2.3 Truth table for Not operation A ¬ A T F F T Boolean algebra is used extensively by programmers in conditional and iterative statements. Complex Boolean expressions may be formed from simple Boolean expressions using the logical connectives (“AND”, “OR” and “NOT”). For exam- ple, x > 2, x < 6 are two simple Boolean expressions. A more complex Boolean expression that yields the set {3,4,5} is given by: x > 2 AND x < 6 Boolean algebra plays an essential role in sorting and searching. For example, the following example in SQL selects data from the employee table where the age of the employee is greater than 20. SELECT name, age, salary FROM Employees WHERE age > 20 2.2.2 Foundations of Computing Boole’s work on Boolean Algebra remained relatively unknown for many years as it seemed to have little practical use to society. However, Claude Shannon’s research 2.2 Boole 35 at Massachusetts Institute of Technology in the 1930s showed that Boolean Algebra could be employed in telephone routing switches. He showed that it could play a role in the design of systems used in telephone routing and that conversely that these circuits could solve Boolean algebra problems. Modern electronic computers use the properties of electrical switches to do logic, with high voltage representing the Boolean state “on” and low voltage representing the Boolean state “off”. Boolean algebra is basic to the design of digital computer circuits, and all modern computers use Boolean Logic. Computer microchips con- tain thousands of tiny electronic switches arranged into logical gates. The basic logic gates are AND, OR and NOT. These gates may be combined in various ways to allow the computer to perform more complex tasks. Each gate has binary value inputs and outputs. The output from the gate is a single high or low voltage logical conclusion. The voltage represents the binary “true” or “false” or equivalently “on” or “off” or the binary value “1” or “0”. The example in Fig. 2.2 below is that of an “AND” gate and this gate produces the binary value “1” as output only if both inputs are “1”. That is, the AND gate will produce a TRUE result only if all inputs are TRUE. Otherwise, the result will be FALSE (i.e., binary 0). Figure 2.3 is that of an “OR” gate and this gate produces the binary value “1” as output if any of its inputs is “1”. That is, the OR gate will produce a TRUE result if any of its input is TRUE otherwise it will produce the output FALSE. Finally, a NOT gate accepts only a single input, either TRUE or FALSE, which it reverses (Fig. 2.4). That is, if the input is “1” the value “0” is returned and vice versa. The NOT gate may be combined with the AND or the OR gate to yield the NAND gate (NOT AND) or the NOR gate (NOT OR). The power of the AND, OR and NOT gates may be seen in the example of a half adder in Fig. 2.5. It shows how these gates may be combined to do elementary binary arithmetic. The addition of 1 + 0 is considered. The inputs to the top OR gate are 1 and 0 and this yields the result of 1. The inputs to the bottom AND gate are 1 and 0 which yields the result 0, which is then inverted through the NOT gate to yield Fig. 2.2 Binary AND operation Fig. 2.3 Binary OR operation 36 2 Foundations Fig. 2.4 NOT operation Fig. 2.5 Half-adder The half-adder may be extended to a full adder that provides a carry for addition. binary 1. Finally, the last AND gate receives two 1’s as input and returns a binary 1 result. Thus, the result of 1 + 0 is 1. This example of the half-adder correctly computes the addition of two arbitrary binary digits. However, it does not compute a carry for the addition of 1 + 1. 2.3 Babbage