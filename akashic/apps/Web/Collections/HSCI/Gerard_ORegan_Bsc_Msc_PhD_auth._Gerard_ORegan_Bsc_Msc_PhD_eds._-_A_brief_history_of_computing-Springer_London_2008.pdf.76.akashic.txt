Formal methods have been successfully applied to the hardware veriﬁcation ﬁeld; for example, parts of the Viper microprocessor25 were formally veriﬁed, and the FM9001 microprocessor was formally veriﬁed by the Boyer Moore theorem prover [HB:95]. There are many examples of the use of formal methods in the railway domain, and examples dealing with the modeling and veriﬁcation of a railroad gate 22 I recall a keynote presentation by Peter Lupton of IBM (Hursley) at the Formal Methods Europe (FME’93) conference in which he noted that there was a resistance to the use of formal methods among the software engineers at IBM (Hursley), and that the engineers found the Z notation to be slightly unintuitive. 23 However, I was disappointed to learn that the resulting software was actually never deployed on the A-7 aircraft, and that it was essentially just a research project. Similarly, the time and cost involved in the mathematical veriﬁcation of the Darlington nuclear power plant was a concern to managerment. 24 This was an impressive use of mathematical techniques and it has been acknowledged that formal methods must play an important role in future developments at Darlington. However, given the time and cost involved in the software inspection of the shutdown software some managers have less enthusiasm in shifting from hardware to software controllers [Ger:94]. 25 The VIPER microprocessor chip was very controversial. It is an example of where formal methods were oversold in that the developers RSRE (Royal Signals and Radar Establishment) of the United Kingdom and Charter (a company licensed to exploit the VIPER results) claimed that the VIPER chip was formally speciﬁed and that the chip design conforms to the speciﬁcation. However, the report by Avra Cohen of Cambridge University’s computer laboratories argued that the claim by RSRE and Charter was misleading. Computational Logic of the United States later conﬁrmed Avra Cohn’s conclusions. 4.5 Formal Methods 123 controller and railway signaling are described in [HB:95]. Clearly, it is essential to verify safety critical properties such as “when the train goes through the level crossing then the gate is closed”. The mandatory use of formal methods in some safety and security-critical ﬁelds has led to formal methods being employed to verify correctness in the nuclear power industry, in the aerospace industry, in the security technology area, and the railroad domain. These sectors are subject to stringent reg- ulatory controls to ensure safety and security. Formal methods have been successfully applied to the telecommunications domain, and have been useful in investigating the feature interaction problem as described in [Bou:94]. The EC SCORE project considered mathematical techniques to identify and eliminate feature interaction in the telecommunications environment. The feature interaction problem occurs when two features that work correctly in isolation fail to work correctly together. Formal methods have been applied to domains which have little to do with com- puter science, for example, to the problem of the formal speciﬁcation of the single transferable voting system in [Pop:97], and to various organizations and structures in [ORg:97]. There is a collection of examples to which formal methods have been applied in [HB:95]. 4.5.3 Tools for Formal Methods One key criticism of formal methods is the lack of available or usable tools to sup- port the engineer in writing the formal speciﬁcation or in doing the proof. Many of the early tools were criticized as being of academic use only, and not being of industrial strength. However, in recent years better tools have become available, and it is likely that more advanced tools will become available in the coming years to support the engineer’s work in formal speciﬁcation and formal proof. There are various kinds of tools employed to support the formal software devel- opment environment. These include syntax checkers to check that the speciﬁcation is syntactically correct; specialized editors to ensure that the written speciﬁcation is syntactically correct; tools to support reﬁnement; automated code generators to gen- erate a high-level language corresponding to the speciﬁcation; theorem provers to demonstrate the presence or absence of key properties and to prove the correctness of reﬁnement steps, and to identify and resolve proof obligations; and speciﬁcation animation tools where the execution of the speciﬁcation can be simulated. Such tools are available from vendors like B-Core and IFAD. The tools are developed to support existing methods and the trend is towards an integrated set of method and tools rather than loosely coupled tools. For example, the B-Toolkit from B-Core is an integrated set of tools that supports the B-Method. These include syntax and type checking, speciﬁcation animation, proof obligation generator, an auto-prover, a proof assistor, and code generation. Thus, in theory,