is that it is very easy to make errors in C programs, and to thereby produce undesir- able results. For example, one of the easiest mistakes to make is to accidently write the assignment operator (=) for the equality operator (==). This totally changes the meaning of the original statement as can be seen below: if (a == b) a++; .... Program fragment A else a-- if (a = b) 3.4 Object-Oriented Languages 87 a++; .... Program fragment B else a-- Both program fragments are syntactically correct. Program fragment A is what was intended. However, program fragment B is what was written and it has a totally different meaning from that intended. The philosophy of C to allow statements to be written as concisely as possible, and this is potentially dangerous.13 The use of pointers potentially leads to problems (as uninitialised pointers can point any- where in memory, and may therefore write anywhere in memory. This may lead to unpredictable results). Therefore, the effective use of C requires experienced programmers, well documented source code, and formal peer reviews of the source code by other developers. 3.4 Object-Oriented Languages Object-oriented programming is a paradigm shift from the traditional way of pro- gramming. The traditional view of programming is that a program is a collection of functions, or a list of instructions to be performed on the computer. Object-oriented programming considers a computer program to be a collection of objects that act on each other. Each object is capable of receiving messages, processing data, and send- ing messages to other objects. That is, each object may be viewed as an independent entity or actor with a distinct role or responsibility. An object is a “black box” which sends and receives messages. A black box consists of code (computer instructions) and data (information which these instruc- tions operate on). The traditional way of programming kept code and data separate. For example, functions and data structures in the C programming language are not connected. A function in C can operate on many different types of structures, and a particular structure may be operated on by more than one function. However, in the object-oriented world code and data are merged into a single indivisible thing called an object. The reason that an object is called a black box is that the user of an object never needs to look inside the box, since all communication to it is done via messages. Messages deﬁne the interface to the object. Everything an object can do is repre- sented by its message interface. Therefore, there is no need to know anything about what is in the black box (or object) in order to use it. The approach to access to an 13 It is very easy to write incomprehensible code in C and even a 1-line of C code can be incompre- hensible. The maintenance of poorly written code is a challenge unless programmers follow good programming practice. This discipline needs to be enforced by formal reviews of the source code. 88 3 Computer Programming Languages object only through its messages, while keeping the internal details private is called information hiding14 and this dates back to work done by Parnas in the early 1970s. The origins of object-oriented programming go back to the late 1960s with the invention of the Simula 67 language at the Norwegian Computing Research Cen- tre15 in Oslo. It introduced the notion of classes and also the concept of instances of classes.16 Simula 67 inﬂuenced other languages, and this led to the development of the Smalltalk object-oriented language at Xerox in the mid-1970s. Xerox intro- duced the term Object-oriented programming for the use of objects and messages as the basis for computation. Many modern programming languages (e.g., Java and C++) support object-oriented programming. The main features of object-oriented languages are given in Table 3.1 Object-oriented programming has become very popular in large-scale software engineering, and it became the dominant paradigm in programming from the late 1980s. The proponents of object-oriented programming argue that it is easier to learn, and simpler to develop and maintain. Its growth in popularity was helped by the rise in popularity of Graphical User Interfaces (GUI), as the development of GUIs are well-suited to object-oriented programming. The C++ language has become very popular and it is an object-oriented extension of the C programming language. Object-oriented features have been added to many existing languages including Ada, BASIC, Lisp, Fortran, and Pascal. However, adding object-oriented features to procedural languages that were not initially designed for object-oriented methods often led to problems with compatibility and maintainability of code. Smalltalk was developed by Xerox in the 1970s and it inﬂuenced later languages such as C++ and Java. 3.4.1 C++ and Java Bjarne Stroustroup developed extensions to the C programming language to include