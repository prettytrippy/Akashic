which is the first term ignored in fourth order Runge-Kutta simulations, it is possible to  use A to estimate a new value of It, hnew, in order to attain a desired improvement in  accuracy. It must be recognized, however, that A represents the error accumulated over N  steps of the simulation. If the calculation is carried out to a final time T = Nh, then:  ~ = Nh5M = h4TM  (5.30)  15  where M is related to the maximum value of d5x/d?5. Thus, although the error per step in  fourth order Runge-Kutta is proportional to h\ the cumulative error is proportional to  It4. If we denote the new desired error by e, then the new value /inew that should give this size  error obeys the same relationship as (5.30):  y5 = >t,JM  (5-31)  where M is approximately the same as in (5.30). By now taking the ratio of (5.31) to (5.30)  and solving for hnevl, we obtain the formula:  l e 11/4  /'new < h\-\  (5.32)  The < sign has been introduced to emphasize both that this is an approximate result  and that e is presumably the maximum desirable error. When one employs (5.32) to  reduce error, /;new should be reduced to at least h/2 in order to have a significant effect.  In the neural simulations following in later chapters, it is generally adequate to com- pute a solution with both h and 2/J as step sizes so that (5.28) may be used to estimate the  error in the /; step size simulation. If this is too large, then (5.32) may be used to estimate  /?new with which to repeat the simulation. A final simulation with 2/;new as the step size may  be used to check that the new error calculated from (5.28) is indeed within the desired  tolerance. If necessary, the procedure can be repeated. A more sophisticated approach is  to use (5.32) at each step in the Runge-Kutta simulation to adjust the step size h to  maintain a desired degree of accuracy throughout the computation (an adaptive step size  routine). This is generally more efficient than using the smallest h necessary for a desired  degree of accuracy, but it is no more accurate. Fixed step size methods will therefore be  adopted here, and the interested reader is referred to Press et al. (1986) for further con- sideration of adaptive step size methods. It is also worth mentioning that MatLab  implements an adaptive step size routine in the ode45() procedure, which the interested  reader is invited to explore.  5.6  Exercises  1. In Chapter 2 we developed an equation for a simple neuron using the Naka-Rushton  function S(P) defined in (2.11). Simulate the solution of the following differential  equation using RungeKutta4.m:  Approximation and simulation  71  { 100F2  „  0  for P < 0  P(t) = 20sin(27rl0?)  where both the time constant and ? are in seconds. Let R(0) = 0 for your initial condition.  Run your simulation for 1.0 s and plot the results. Use a time step/? of 0.004 s (i.e. 4 ms).  Obtain an error estimate of your result by repeating the simulation with h — 2 ms. You  have just modeled the response of a simple cell in monkey visual cortex (Movshon et al.,  1978)!  2. The program Euler.m implements an Euler approximation to the simple equations:  d?  d.v  .  dt  Assume the initial condition is x(0) = 2, v(0) = 0, and write down the exact solution.  Next use Euler.m to simulate these equations for time steps It = 0.1, 0.01, and 0.001.  Does the Euler approximation produce a trajectory that is stable, asymptotically stable,  or unstable? Does the stability of the Euler approximation agree with that of the exact  solution? Why or why not? (Hint: sketch a phase plane trajectory for the exact solution  and discuss how the Euler approximation deviates from this.) This problem will also show  you how to plot phase plane solutions for any two variables in a simulation.  3. Derive the error estimate (5.28) for the fourth order Runge-Kutta procedure.  4. The following equation is known as the van der Pol equation:  d2x  ,  dv  d ^ -