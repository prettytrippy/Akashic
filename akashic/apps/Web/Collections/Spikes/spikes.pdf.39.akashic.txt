Finally, a weighted average of these four estimates of dx/d? is used to compute x(? + It).  As an example, let us again approximate (5.15) with It = 4 ms. Simple calculation gives:  ft = "To Wlth A"(0) = 1  so  K, =F(1) = -0.10  K2 = F(0.8) = -0.08  Ki = F(0.84) = -0.084  K* - F(0.664) = -0.0664  (5.27)  so  4  x(4) « x(0) +-(-0.4944) = 0.6704  6  The slopes K\ - K4 are plotted at the points where they are calculated in Fig. 5.3 along  with a comparison to the exact result. As the exact solution is x = exp(-?/10),  x(4) = 0.67032. Thus, the fourth order Runge-Kutta estimate is accurate to 0.01% here.  As the fourth order Runge Kutta routine is based on the Taylor series expansion up to  fourth order, an estimate of the error is obtained from a comparison of simulations with  step sizes of h and h/2, called x\ (?) and x2(?) respectively. Using the approach developed  earlier, the fourth order error estimate is:  A  x2(t)-xi(t)  Error « - =  2±L^  lK  (5.28)  Both Euler's method and the various Runge-Kutta routines can be generalized to a  differential equation of any order that is cast into normal form. Taking the case of two  coupled differential equations as an example, the fourth order Runge-Kutta approx- imation requires application of (5.26) to both equations simultaneously. The relevant  Approximation and simulation  64  1  '  1  - a x(o)  " K 1 ^ \ .  - - - >  i  i  1  I  •  T  Exact  Solution  \ I K 3  K2  X s  I  ,  I  K4  1  '  - - x(4)  _  i  1  0.95  0.9  .— °- 8 5  "><  0.8  0.75  0.7  0.65  0.6  0  1 2  3  4  Time (msec)  Fig. 5.3 Graphical representation of the four values of d.v/dr, K.1-K4, calculated in the fourth order Runge- Kutta approximation (5.28) to eqn (5.15). The exact solution and the estimate of ,v(4) are also shown.  formulae thus become:  so  dx  dv  — = F(x,y,?)  and  -^ = G(x,y,t)  x(t + h) « x(?) +-{KX+ 2K2 + 2K3 + K4)  6  h  y(t + h) « y(t) +7(Li+  2L2 + 2L3 + L4)  6  where  K{ =F(x,v,?);  K2  h „  h T  h  Ki = F\x + ^K2,y + \L2,t + ~  K4 = F(x + hK3,y + hL3, t + h);  Ex  =G(x,y,t)  L2 = G\x + -Ki,y + -Li,t + - f  h  h  h  Li = Gix + -K2,y + -L2,t + - L4 = G(x + hK3,y + hL3, t + h)  (5.29)  The accompanying MatLab script, RungeKutta4.m, implements (5.29) for any number  of equations (see Appendix for details). In calculating the error in (5.29) it is apparent that  there will be one value of A for x and another for y. It is prudent to use the larger of these as  an estimate of the overall error of the simulation.  5.5 Variable step size routines  There is one further embellishment to the fourth order Runge-Kutta routine that bears  mentioning. As the error in (5.28) is computed from the Taylor polynomial term in h5,  70  Spikes, decisions, and actions 