cx + g(t)  d?  Nonlinear differential equations can always be written in normal form so long as they  are linear in the highest order derivative. Differential equations are termed quasi-linear if  the term containing the highest order derivative is linear. Virtually all equations in both  theoretical physics and neuroscience fall into this category. Let us consider just one  example, the famous van der Pol (1926) equation, which was developed as the first  mathematical model of the heartbeat:  ^-a(l-x2)%  + bx = 0  dt-  dt  This is converted to normal form in the same manner as our linear examples:  dx_ fV  (39)  -r = a(l  -x2)y-bx  at  A slightly modified version of this equation (the FitzHugh-Nagumo equation) has been  proposed as a simple approximation to the Hodgkin-Huxley equations and will be dis- cussed in Chapter 8. All quasi-linear equations can be cast into normal form, and it is thus  the most general form for representing differential equations. It is important to note,  however, that nonlinear differential equations in normal form cannot always be con- verted back into a single higher order equation.  Normal form equations will be very important to our study of neurodynamics for  two reasons. First, the most powerful methods for solving nonlinear differential equa- tions numerically by computer require that the equations be cast in normal form (see  Chapter 5). More importantly, it is natural to think of neural problems in terms of their  components, typically either neurons, ionic species, or ion channels. In these cases, one  writes one first order equation for each component and studies the resultant normal form  system. As a simple example, suppose that we have two neurons, one excitatory (E), and  one inhibitory (I), that are connected to form an inhibitory feedback loop, as illustrated  in Fig. 1.3. If each neuron is described by its spike rate as in (2.12), this two neuron  network would be described by:  f = i[-£+^-W)]  (3.10)  - = _ [ - / + S(fl£)]  d?  T\  Two-dimensional systems  31  where S is the Naka-Rushton function defined in (2.11). The constants a and b here  represent weights of the synapses from E —> /and from / —> £ respectively, while p is the  excitatory input to the £ neuron. Nonlinear neural equations like these have been ana- lyzed in detail (Wilson and Cowan, 1972), and we shall study them in Chapters 6 -8 after  we have developed some further background.  3.2 Solution of second order systems  In the last section we saw that all quasi-linear second order systems can be written in  normal form. Restricting ourselves to linear systems at present, a general second order  system may be written in vector notation as:  d (x\  fa] a2\ fx\  (b\  dt \yj  \ «i fl4 / \yj  \b2  or  — = AX+B where X = ()  (3.11)  (The double headed arrow over the A will always designate a square matrix.) All of the as  and /3s in (3.11) are assumed to be constants. In analyzing any system of differential equa- tions such as this, the first step is to ascertain the location of the equilibrium point or steady  state. This occurs where there is no change in the system with time, so the temporal deriva- tives must all vanish simultaneously at the steady state. In vector form, the solution is:  dfeq  /0  d?  VO  so  Xeq = -A B  (3.12)  where A~l is the inverse of matrix A. (Rather than calculating A~x outright, it is more  efficient and accurate computationally to solve for Xeq using a technique known as  Gaussian elimination with back substitution, see Press et al., 1986.) Solving (3.12) is  equivalent to solving two simultaneous linear equations. To simplify this, the disk  accompanying this book contains the MatLab™ script Equilibrium.m for solving (3.12)  using a Gaussian elimination algorithm. The user simply types in the values of the four as  and the two bs, and MatLab solves (3.12) for the coordinates of the steady state. As one  example using the program:  -9 - 5  1 - 3  B  so  / i  * « q = l l l  (313)  32  Spikes, decisions, and actions 